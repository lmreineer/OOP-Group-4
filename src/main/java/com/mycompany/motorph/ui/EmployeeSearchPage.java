/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.motorph.ui;

import com.mycompany.motorph.employee.EmployeeInformation;
import com.mycompany.motorph.manager.RBACManager;
import com.mycompany.motorph.model.Employee;
import com.mycompany.motorph.repository.EmployeeDataReader;
import com.opencsv.exceptions.CsvValidationException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;

/**
 * A class that represents the Employee Search Page of the application.
 * <p>
 * It allows users to select a specific employee based on their employee number.
 * Implements the EmployeeInformationManager interface.
 *
 * @author Lance
 */
class EmployeeSearchPage extends javax.swing.JFrame implements EmployeeInformationManager {

    // Constants for button coloring changes
    private static final java.awt.Color LIGHT_BLUE = new java.awt.Color(203, 203, 239);
    private static final java.awt.Color WHITE = new java.awt.Color(255, 255, 255);
    private static final java.awt.Color RED = new java.awt.Color(191, 47, 47);

    private boolean toggleOnButtonClicked = false;
    private int clickCount = 0;
    private JPopupMenu popupMenu;

    /**
     * Constructs an EmployeeSearchPage UI with a given list of menu items.
     *
     * @param menuItems The menu items to be added to the popup menu.
     */
    public EmployeeSearchPage(JMenuItem... menuItems) throws EmployeeDataReader.EmployeeDataException {
        initComponents();
        populateEmployeeTable();
        setupTableMouseListener();

        // Initialize popup menu with given menu items
        popupMenu = new JPopupMenu();
        for (JMenuItem item : menuItems) {
            popupMenu.add(item);
        }
        tblBasicEmployeeInformation.setComponentPopupMenu(popupMenu);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pmnAdminFunctions = new javax.swing.JPopupMenu();
        scrollPaneMain = new javax.swing.JScrollPane();
        pnlMain = new javax.swing.JPanel();
        lblMotorPhHeader = new javax.swing.JLabel();
        lblEmployeeSearchHeader = new javax.swing.JLabel();
        lblBottomSeparator = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBasicEmployeeInformation = new javax.swing.JTable();
        tglOn = new javax.swing.JToggleButton();
        tglOff = new javax.swing.JToggleButton();
        lblEmployeeSelectionToggle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Employee Search");
        setResizable(false);

        scrollPaneMain.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        pnlMain.setBackground(new java.awt.Color(255, 255, 255));

        lblMotorPhHeader.setBackground(new java.awt.Color(255, 255, 255));
        lblMotorPhHeader.setFont(new java.awt.Font("Leelawadee", 1, 18)); // NOI18N
        lblMotorPhHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMotorPhHeader.setText("MotorPH Payroll System");
        lblMotorPhHeader.setOpaque(true);

        lblEmployeeSearchHeader.setBackground(new java.awt.Color(223, 54, 54));
        lblEmployeeSearchHeader.setFont(new java.awt.Font("Leelawadee", 1, 16)); // NOI18N
        lblEmployeeSearchHeader.setForeground(new java.awt.Color(255, 255, 255));
        lblEmployeeSearchHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEmployeeSearchHeader.setText("Employee Search");
        lblEmployeeSearchHeader.setOpaque(true);

        lblBottomSeparator.setBackground(new java.awt.Color(51, 51, 51));
        lblBottomSeparator.setFont(new java.awt.Font("Leelawadee", 1, 16)); // NOI18N
        lblBottomSeparator.setForeground(new java.awt.Color(255, 255, 255));
        lblBottomSeparator.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBottomSeparator.setOpaque(true);

        btnBack.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.setFocusable(false);
        btnBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBackMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBackMouseExited(evt);
            }
        });
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblBasicEmployeeInformation.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        tblBasicEmployeeInformation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee Number", "Last Name", "First Name", "SSS #", "PhilHealth #", "TIN", "Pag-IBIG #"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBasicEmployeeInformation.setEnabled(false);
        tblBasicEmployeeInformation.setFocusable(false);
        tblBasicEmployeeInformation.setRowHeight(24);
        tblBasicEmployeeInformation.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblBasicEmployeeInformation);
        if (tblBasicEmployeeInformation.getColumnModel().getColumnCount() > 0) {
            tblBasicEmployeeInformation.getColumnModel().getColumn(0).setResizable(false);
            tblBasicEmployeeInformation.getColumnModel().getColumn(1).setResizable(false);
            tblBasicEmployeeInformation.getColumnModel().getColumn(3).setResizable(false);
            tblBasicEmployeeInformation.getColumnModel().getColumn(4).setResizable(false);
            tblBasicEmployeeInformation.getColumnModel().getColumn(5).setResizable(false);
        }

        tglOn.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        tglOn.setText("On");
        tglOn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tglOn.setFocusable(false);
        tglOn.setMaximumSize(new java.awt.Dimension(105, 17));
        tglOn.setMinimumSize(new java.awt.Dimension(105, 17));
        tglOn.setPreferredSize(new java.awt.Dimension(105, 17));
        tglOn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tglOnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tglOnMouseExited(evt);
            }
        });
        tglOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglOnActionPerformed(evt);
            }
        });

        tglOff.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        tglOff.setText("Off");
        tglOff.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tglOff.setFocusable(false);
        tglOff.setMaximumSize(new java.awt.Dimension(105, 17));
        tglOff.setMinimumSize(new java.awt.Dimension(105, 17));
        tglOff.setPreferredSize(new java.awt.Dimension(105, 17));
        tglOff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tglOffMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tglOffMouseExited(evt);
            }
        });
        tglOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglOffActionPerformed(evt);
            }
        });

        lblEmployeeSelectionToggle.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        lblEmployeeSelectionToggle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEmployeeSelectionToggle.setText("Employee Selection Toggle");
        lblEmployeeSelectionToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblBottomSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEmployeeSearchHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblMotorPhHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1)
                .addGap(12, 12, 12))
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(297, 297, 297)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblEmployeeSelectionToggle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(tglOn, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tglOff, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 297, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(380, 380, 380))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(lblMotorPhHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(lblEmployeeSearchHeader)
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(lblEmployeeSelectionToggle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tglOff, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tglOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(lblBottomSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        scrollPaneMain.setViewportView(pnlMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scrollPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles the action event of the back button to close the current page.
     */
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // Close the current page
        dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * Handles mouse hover event on the back button by changing its background
     * color.
     */
    private void btnBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseEntered
        btnBack.setBackground(LIGHT_BLUE);
    }//GEN-LAST:event_btnBackMouseEntered

    /**
     * Handles mouse exit event on the back button by resetting its background
     * color.
     */
    private void btnBackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseExited
        btnBack.setBackground(WHITE);
    }//GEN-LAST:event_btnBackMouseExited

    /**
     * Handles the action event of the "Toggle On" button to handle its clicks.
     */
    private void tglOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglOnActionPerformed
        handleToggleOn();
    }//GEN-LAST:event_tglOnActionPerformed

    /**
     * Handles the action event of the "Toggle Off" button to handle its clicks.
     */
    private void tglOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglOffActionPerformed
        handleToggleOff();
    }//GEN-LAST:event_tglOffActionPerformed

    /**
     * Handles mouse hover event on the "Toggle On" button by changing its
     * background color.
     */
    private void tglOnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tglOnMouseEntered
        tglOn.setBackground(LIGHT_BLUE);
    }//GEN-LAST:event_tglOnMouseEntered

    /**
     * Handles mouse exit event on the "Toggle On" button by resetting its
     * background color.
     */
    private void tglOnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tglOnMouseExited
        tglOn.setBackground(WHITE);
    }//GEN-LAST:event_tglOnMouseExited

    /**
     * Handles mouse hover event on the "Toggle Off" button by changing its
     * background color.
     */
    private void tglOffMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tglOffMouseEntered
        tglOff.setBackground(LIGHT_BLUE);
    }//GEN-LAST:event_tglOffMouseEntered

    /**
     * Handles mouse exit event on the "Toggle Off" button by resetting its
     * background color.
     */
    private void tglOffMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tglOffMouseExited
        tglOff.setBackground(WHITE);
    }//GEN-LAST:event_tglOffMouseExited

    /**
     * Displays an error dialog with the provided error message.
     *
     * @param errorMessage The error message to display in the dialog.
     */
    @Override
    public void showErrorDialog(String errorMessage) {
        // Show a dialog with the error message
        JOptionPane.showMessageDialog(pnlMain, "Error updating employee information: " + errorMessage, "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Handles the action event of updating employee information when a row is
     * selected.
     */
    public void mniUpdateInformationActionPerformed(java.awt.event.ActionEvent evt) throws EmployeeDataReader.EmployeeDataException, EmployeeInformation.EmployeeNotFoundException, RBACManager.InvalidRoleException {
        int rowIndex = tblBasicEmployeeInformation.getSelectedRow();
        // If a row is selected and toggle button is on
        if (rowIndex != -1 && toggleOnButtonClicked) {
            showEmployeeInformation(rowIndex);
        }
    }

    /**
     * Handles the action event of computing payroll for a selected employee.
     */
    public void mniComputePayrollActionPerformed(java.awt.event.ActionEvent evt) {
        int rowIndex = tblBasicEmployeeInformation.getSelectedRow();

        if (rowIndex != -1) {
            int employeeNumber = (int) tblBasicEmployeeInformation.getValueAt(rowIndex, 0);

            // Open Payroll Computation Frame with the correct employee number
            new PayrollComputationFrame(employeeNumber).setVisible(true);
        } else {
            // Show an error message if no row is selected
            JOptionPane.showMessageDialog(this, "Please select an employee row first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Handles the action event of updating credentials for a selected employee.
     */
    public void mniUpdateCredentialsActionPerformed(java.awt.event.ActionEvent evt) {
        int rowIndex = tblBasicEmployeeInformation.getSelectedRow();

        if (rowIndex != -1) {
            int employeeNumber = (int) tblBasicEmployeeInformation.getValueAt(rowIndex, 0);
            String currentUsername = findUsernameByEmployeeNumber(employeeNumber);

            if (currentUsername == null) {
                JOptionPane.showMessageDialog(this, "Username not found for the selected employee.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            new UpdateCredentialsPage(employeeNumber, currentUsername, "Employee").setVisible(true); // Pass correct username
        } else {
            JOptionPane.showMessageDialog(this, "Please select an employee row first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void setPopupMenuItems(JMenuItem... menuItems) {
        popupMenu = new JPopupMenu();
        for (JMenuItem item : menuItems) {
            popupMenu.add(item);
        }

        tblBasicEmployeeInformation.setComponentPopupMenu(popupMenu);
    }

    /**
     * Refreshes the employee table by clearing and repopulating it.
     */
    public void refreshEmployeeTable() throws EmployeeDataReader.EmployeeDataException {
        DefaultTableModel model = (DefaultTableModel) tblBasicEmployeeInformation.getModel();
        // Clear existing rows
        model.setRowCount(0);

        // Reload data from CSV
        populateEmployeeTable();
    }

    /**
     * Sets up a mouse listener for table row selection events. Shows the popup
     * menu when an employee row is clicked.
     */
    private void setupTableMouseListener() {
        tblBasicEmployeeInformation.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int rowIndex = tblBasicEmployeeInformation.getSelectedRow();
                if (rowIndex != -1 && toggleOnButtonClicked) {
                    popupMenu.show(tblBasicEmployeeInformation, e.getX(), e.getY());
                }
            }
        });
    }

    /**
     * Populates the employee table with data retrieved from
     * EmployeeInformation.
     */
    private void populateEmployeeTable() throws EmployeeDataReader.EmployeeDataException, EmployeeDataReader.EmployeeDataException {
        try {
            EmployeeInformation employeeInformation = new EmployeeInformation();
            List<Employee> employees = employeeInformation.getAllEmployees();
            DefaultTableModel model = (DefaultTableModel) tblBasicEmployeeInformation.getModel();

            for (Employee employee : employees) {
                model.addRow(new Object[]{
                    employee.getEmployeeNumber(),
                    employee.getLastName(),
                    employee.getFirstName(),
                    employee.getSssNumber(),
                    employee.getPhilHealthNumber(),
                    employee.getTin(),
                    employee.getPagIbigNumber()
                });
            }
        } catch (IOException | ParseException | CsvValidationException e) {
            showErrorDialog(e.getMessage());
        }
    }

    /**
     * Finds the username associated with the given employee number from
     * login_credentials.csv.
     */
    private String findUsernameByEmployeeNumber(int employeeNumber) {
        String filePath = "src/main/resources/data/login_credentials.csv"; // Adjust if needed

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            br.readLine(); // Skip header

            while ((line = br.readLine()) != null) {
                String[] credentials = line.split(",");
                if (credentials.length >= 3) {
                    String username = credentials[0].trim();
                    String extractedNumber = username.replaceAll("\\D", ""); // Remove non-digits from username

                    if (!extractedNumber.isEmpty() && Integer.parseInt(extractedNumber) == employeeNumber) {
                        return username;
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading login_credentials.csv: " + e.getMessage());
        }
        return null; // Return null if no match is found
    }

    /**
     * Handles the action event of the toggle on button to enable selection of
     * employee and show its information.
     */
    private void handleToggleOn() {
        // Increment the click count
        clickCount++;
        // Determine if toggle is on or off
        toggleOnButtonClicked = (clickCount % 2 != 0);

        // Enable or disable table and set toggle button states
        tblBasicEmployeeInformation.setEnabled(toggleOnButtonClicked);
        tglOn.setSelected(toggleOnButtonClicked);
        tglOff.setSelected(!toggleOnButtonClicked);
    }

    /**
     * Handles the action event of the toggle off button to disable selection of
     * employee and reset toggle state.
     */
    private void handleToggleOff() {
        // Reset click count
        clickCount = 0;
        // Set toggle to off
        toggleOnButtonClicked = false;

        // Disable table and set intended toggle button states
        tblBasicEmployeeInformation.setEnabled(false);
        tglOn.setSelected(false);
        tglOff.setSelected(true);
    }

    /**
     * Displays employee information in a new frame.
     *
     * @param rowIndex The index of the selected row in the table
     */
    private void showEmployeeInformation(int rowIndex) throws EmployeeDataReader.EmployeeDataException, EmployeeInformation.EmployeeNotFoundException, RBACManager.InvalidRoleException {
        try {
            DefaultTableModel model = (DefaultTableModel) tblBasicEmployeeInformation.getModel();
            int employeeNumber = (int) model.getValueAt(rowIndex, 0);

            EmployeeInformation employeeInformation = new EmployeeInformation();
            Employee employeeDetails = employeeInformation.showEmployeeInformation(employeeNumber);

            // Pass reference of EmployeeSearchPage
            new AdminViewProfileFrame(employeeDetails, "ADMIN", this).setVisible(true);
        } catch (IOException | ParseException | CsvValidationException e) {
            showErrorDialog(e.getMessage());
        }
    }

    /**
     * Displays a confirmation dialog before logging out and returning to the
     * login page.
     */
    private void logout() {
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to logout?", "Logout", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            dispose();
            new LoginPage().setVisible(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBottomSeparator;
    private javax.swing.JLabel lblEmployeeSearchHeader;
    private javax.swing.JLabel lblEmployeeSelectionToggle;
    private javax.swing.JLabel lblMotorPhHeader;
    private javax.swing.JPopupMenu pmnAdminFunctions;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JScrollPane scrollPaneMain;
    private javax.swing.JTable tblBasicEmployeeInformation;
    private javax.swing.JToggleButton tglOff;
    private javax.swing.JToggleButton tglOn;
    // End of variables declaration//GEN-END:variables

}
