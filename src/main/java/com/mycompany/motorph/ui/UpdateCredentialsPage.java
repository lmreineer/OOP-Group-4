/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.motorph.ui;

import com.mycompany.motorph.security.PasswordManager;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * UpdateCredentialsPage allows IT users to update an employee's login
 * credentials.
 *
 * @author Lance
 */
class UpdateCredentialsPage extends javax.swing.JFrame implements EmployeeInformationManager {

    // Constants for button coloring changes
    private static final java.awt.Color LIGHT_BLUE = new java.awt.Color(203, 203, 239);
    private static final java.awt.Color WHITE = new java.awt.Color(255, 255, 255);
    private static final java.awt.Color RED = new java.awt.Color(191, 47, 47);

    private int employeeNumber;
    private String currentUsername;
    private String division;
    private static final String HASHED_FILE_PATH = "src/main/resources/data/login_credentials_hashed.csv";
    private static final String PLAIN_FILE_PATH = "src/main/resources/data/login_credentials.csv";

    /**
     * Creates an UpdateCredentialsPage for updating a specific employee's
     * credentials.
     *
     * @param employeeNumber The employee's ID.
     * @param currentUsername The current username of the employee.
     * @param division The employee's division (e.g., IT, Admin, Employee).
     */
    public UpdateCredentialsPage(int employeeNumber, String currentUsername, String division) {
        this.employeeNumber = employeeNumber;
        this.currentUsername = currentUsername;
        this.division = division;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPaneMain = new javax.swing.JScrollPane();
        pnlMain = new javax.swing.JPanel();
        lblMotorPhHeader = new javax.swing.JLabel();
        lblUpdateCredentialsHeader = new javax.swing.JLabel();
        lblBottomSeparator = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblSelectedUser = new javax.swing.JLabel();
        lblNewUsername = new javax.swing.JLabel();
        lblNewPassword = new javax.swing.JLabel();
        btnUpdateCredentials = new javax.swing.JButton();
        txtSelectedUser = new javax.swing.JTextField();
        txtNewPassword = new javax.swing.JPasswordField();
        txtNewUsername = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Employee and Wage Information");
        setResizable(false);

        scrollPaneMain.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        pnlMain.setBackground(new java.awt.Color(255, 255, 255));

        lblMotorPhHeader.setBackground(new java.awt.Color(255, 255, 255));
        lblMotorPhHeader.setFont(new java.awt.Font("Leelawadee", 1, 18)); // NOI18N
        lblMotorPhHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMotorPhHeader.setText("MotorPH Payroll System");
        lblMotorPhHeader.setOpaque(true);

        lblUpdateCredentialsHeader.setBackground(new java.awt.Color(223, 54, 54));
        lblUpdateCredentialsHeader.setFont(new java.awt.Font("Leelawadee", 1, 16)); // NOI18N
        lblUpdateCredentialsHeader.setForeground(new java.awt.Color(255, 255, 255));
        lblUpdateCredentialsHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUpdateCredentialsHeader.setText("Update Credentials");
        lblUpdateCredentialsHeader.setOpaque(true);

        lblBottomSeparator.setBackground(new java.awt.Color(51, 51, 51));
        lblBottomSeparator.setFont(new java.awt.Font("Leelawadee", 1, 16)); // NOI18N
        lblBottomSeparator.setForeground(new java.awt.Color(255, 255, 255));
        lblBottomSeparator.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBottomSeparator.setOpaque(true);

        btnExit.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        btnExit.setText("Exit");
        btnExit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        btnExit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnExit.setFocusable(false);
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnExitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnExitMouseExited(evt);
            }
        });
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.setFocusable(false);
        btnBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBackMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBackMouseExited(evt);
            }
        });
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblSelectedUser.setFont(new java.awt.Font("Leelawadee UI", 1, 12)); // NOI18N
        lblSelectedUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSelectedUser.setText("Selected User:");
        lblSelectedUser.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        lblSelectedUser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblSelectedUser.setMaximumSize(new java.awt.Dimension(93, 25));
        lblSelectedUser.setMinimumSize(new java.awt.Dimension(93, 25));
        lblSelectedUser.setOpaque(true);

        lblNewUsername.setFont(new java.awt.Font("Leelawadee UI", 1, 12)); // NOI18N
        lblNewUsername.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNewUsername.setText("New Username:");
        lblNewUsername.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        lblNewUsername.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblNewUsername.setMaximumSize(new java.awt.Dimension(93, 25));
        lblNewUsername.setMinimumSize(new java.awt.Dimension(93, 25));
        lblNewUsername.setOpaque(true);

        lblNewPassword.setFont(new java.awt.Font("Leelawadee UI", 1, 12)); // NOI18N
        lblNewPassword.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNewPassword.setText("New Password:");
        lblNewPassword.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        lblNewPassword.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblNewPassword.setMaximumSize(new java.awt.Dimension(93, 25));
        lblNewPassword.setMinimumSize(new java.awt.Dimension(93, 25));
        lblNewPassword.setOpaque(true);

        btnUpdateCredentials.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        btnUpdateCredentials.setText("Update Credentials");
        btnUpdateCredentials.setToolTipText("");
        btnUpdateCredentials.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        btnUpdateCredentials.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdateCredentials.setFocusable(false);
        btnUpdateCredentials.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnUpdateCredentialsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnUpdateCredentialsMouseExited(evt);
            }
        });
        btnUpdateCredentials.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCredentialsActionPerformed(evt);
            }
        });

        txtSelectedUser.setEditable(false);
        txtSelectedUser.setText(currentUsername);
        txtSelectedUser.setFocusable(false);

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblBottomSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblUpdateCredentialsHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblMotorPhHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(129, 129, 129))
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addComponent(lblNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNewPassword))
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addComponent(lblNewUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNewUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addComponent(lblSelectedUser, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSelectedUser, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(btnUpdateCredentials, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(lblMotorPhHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(lblUpdateCredentialsHeader)
                .addGap(15, 15, 15)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelectedUser, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSelectedUser, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNewUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNewUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(btnUpdateCredentials, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(lblBottomSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        scrollPaneMain.setViewportView(pnlMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles the action event of the back button to close the current page.
     */
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // Close the current page
        dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * Handles mouse exit event on the back button by resetting its background
     * color.
     */
    private void btnBackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseExited
        btnBack.setBackground(WHITE);
    }//GEN-LAST:event_btnBackMouseExited

    /**
     * Handles mouse hover event on the back button by changing its background
     * color.
     */
    private void btnBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseEntered
        btnBack.setBackground(LIGHT_BLUE);
    }//GEN-LAST:event_btnBackMouseEntered

    /**
     * Handles the action event of the exit button to exit the application.
     */
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // Exit the application
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * Handles mouse exit event on the exit button by resetting its background
     * color.
     */
    private void btnExitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseExited
        btnExit.setBackground(WHITE);
    }//GEN-LAST:event_btnExitMouseExited

    /**
     * Handles mouse hover event on the exit button by changing its background
     * color.
     */
    private void btnExitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseEntered
        btnExit.setBackground(RED);
    }//GEN-LAST:event_btnExitMouseEntered

    /**
     * Handles mouse exit event on the update credentials button by resetting
     * its background color.
     */
    private void btnUpdateCredentialsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateCredentialsMouseEntered
        btnUpdateCredentials.setBackground(LIGHT_BLUE);
    }//GEN-LAST:event_btnUpdateCredentialsMouseEntered

    /**
     * Handles mouse hover event on the update credentials button by changing
     * its background color.
     */
    private void btnUpdateCredentialsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateCredentialsMouseExited
        btnUpdateCredentials.setBackground(WHITE);
    }//GEN-LAST:event_btnUpdateCredentialsMouseExited

    /**
     * Handles the action event of updating credentials.
     */
    private void btnUpdateCredentialsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCredentialsActionPerformed
        try {
            updateCredentials();
        } catch (PasswordManager.PasswordEncryptionException ex) {
            Logger.getLogger(UpdateCredentialsPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateCredentialsActionPerformed

    /**
     * Updates the user's credentials by modifying username and password
     * records.
     */
    private void updateCredentials() throws PasswordManager.PasswordEncryptionException {
        String newUsername = txtNewUsername.getText().trim();
        String newPassword = new String(txtNewPassword.getPassword()).trim();

        if (newUsername.isEmpty() || newPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Fields cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            List<String> hashedLines = Files.readAllLines(Paths.get(HASHED_FILE_PATH));
            List<String> plainLines = Files.readAllLines(Paths.get(PLAIN_FILE_PATH));
            List<String> updatedHashedLines = new ArrayList<>();
            List<String> updatedPlainLines = new ArrayList<>();
            boolean updated = false;
            boolean usernameTaken = false;

            // Check if new username is already taken
            for (String line : hashedLines) {
                String[] credentials = line.split(",");
                if (credentials.length == 3 && credentials[0].equals(newUsername) && !credentials[0].equals(currentUsername)) {
                    usernameTaken = true;
                    break;
                }
            }

            if (usernameTaken) {
                JOptionPane.showMessageDialog(this, "Username is already taken!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Update credentials in both hashed and plain-text storage files
            for (String line : hashedLines) {
                String[] credentials = line.split(",");
                if (credentials.length == 3 && credentials[0].equals(currentUsername)) {
                    String hashedPassword = PasswordManager.hashPassword(newPassword);
                    updatedHashedLines.add(newUsername + "," + hashedPassword + "," + division);
                    updated = true;
                } else {
                    updatedHashedLines.add(line);
                }
            }

            for (String line : plainLines) {
                String[] credentials = line.split(",");
                if (credentials.length == 3 && credentials[0].equals(currentUsername)) {
                    updatedPlainLines.add(newUsername + "," + newPassword + "," + division);
                } else {
                    updatedPlainLines.add(line);
                }
            }

            // Save updated credentials if changes were made
            if (updated) {
                Files.write(Paths.get(HASHED_FILE_PATH), updatedHashedLines, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);
                Files.write(Paths.get(PLAIN_FILE_PATH), updatedPlainLines, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);
                JOptionPane.showMessageDialog(this, "Credentials updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "User not found!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error updating credentials: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Displays an error dialog with the provided error message.
     *
     * @param errorMessage The error message to display in the dialog.
     */
    @Override
    public void showErrorDialog(String errorMessage) {
        JOptionPane.showMessageDialog(pnlMain, "Error updating employee information: " + errorMessage, "Error", JOptionPane.ERROR_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnUpdateCredentials;
    private javax.swing.JLabel lblBottomSeparator;
    private javax.swing.JLabel lblMotorPhHeader;
    private javax.swing.JLabel lblNewPassword;
    private javax.swing.JLabel lblNewUsername;
    private javax.swing.JLabel lblSelectedUser;
    private javax.swing.JLabel lblUpdateCredentialsHeader;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JScrollPane scrollPaneMain;
    private javax.swing.JPasswordField txtNewPassword;
    private javax.swing.JTextField txtNewUsername;
    private javax.swing.JTextField txtSelectedUser;
    // End of variables declaration//GEN-END:variables
}
